#!/usr/bin/env python3

import subprocess
import argparse
import string
import os


# Helpers

IMAGE = 'weddinglist'
REPOSITORY = 'weddinglistacr.azurecr.io'


def _get_db_credentials(production):
    if production:
        return dict(
            DB_HOST='weddinglistdb.mysql.database.azure.com',
            DB_USER=os.environ['WEDDING_LIST_DB_USER'] + '@weddinglistdb',
            DB_PASSWORD=os.environ['WEDDING_LIST_DB_PASSWORD'],
            DB_DATABASE='dougandmiriam',
        )
    else:
        return dict(
            # Find the local container's IP address
            DB_HOST=subprocess.check_output(
                'docker inspect wl-db | jq -r .[0].NetworkSettings.IPAddress',
                shell=True
            ).decode('utf-8').strip(),
            DB_USER='root',
            DB_PASSWORD='wl.pass',
            DB_DATABASE='dougandmiriam',
        )


def _to_env(d):
    return ' '.join('-e %s=%s' % (k, v) for k, v in d.items())


def sh(cmd, **args):
    cmd = string.Template(cmd).substitute(args)
    code = subprocess.call(cmd, shell=True)
    if code:
        exit(code)


def sh_docker(cmd, docker_cmd='', production=False, **args):
    sh('docker run --rm -it -v ${PWD}:/work -w /work ' + docker_cmd +
       ' ${ENV} ${IMAGE}' +
       ' env FLASK_APP=wl PYTHONPATH=/work ' +
       cmd,
       ENV=_to_env(_get_db_credentials(production)),
       IMAGE=IMAGE,
       PWD=os.getcwd(),
       **args)


# Core image utilities

def run():
    sh_docker('env FLASK_APP=wl.server FLASK_DEBUG=1 PYTHONPATH=/work'
              ' flask run --host=0.0.0.0',
              docker_cmd='-p 5000:5000')


def prod():
    sh_docker('gunicorn -w 4 -b=0.0.0.0:80 wl.server:app',
              docker_cmd='-p 80:80')


def execute(command, production):
    sh_docker(command,
              production=production)


def check():
    sh_docker('pytest')
    sh_docker('flake8')


# Non-core utilities

def build():
    sh('docker build --rm -t ${IMAGE} .', IMAGE=IMAGE)
    sh('docker pull mysql')
    sh('docker pull azuresdk/azure-cli-python')


def push():
    check()
    sh('docker tag ${IMAGE} ${REPOSITORY}/${IMAGE}'
       ' && docker push ${REPOSITORY}/${IMAGE}',
       IMAGE=IMAGE, REPOSITORY=REPOSITORY)


def sql_server():
    sh('docker rm --force wl-db || true')
    sh('docker run --detach --name wl-db -e MYSQL_ROOT_PASSWORD=wl.pass mysql')


def sql_repl(production):
    sh('docker run -it --rm ${ENV} mysql'
       ' sh -c \'exec mysql -h$$DB_HOST -u$$DB_USER -p$$DB_PASSWORD\'',
       ENV=_to_env(_get_db_credentials(production)))


def sql_dump(production):
    sh('docker run -it -v `pwd`:/work -w /work --rm ${ENV} mysql'
       ' sh -c \'mysqldump -h$$DB_HOST -u$$DB_USER -p$$DB_PASSWORD'
       ' --databases $$DB_DATABASE > dump.sql\'',
       ENV=_to_env(_get_db_credentials(production)))


parser = argparse.ArgumentParser(
    description='Run script for development'
)
subparsers = parser.add_subparsers()

p = subparsers.add_parser('run', help='run the server locally')
p.set_defaults(action=run)

p = subparsers.add_parser('prod', help='run the gunicorn server locally')
p.set_defaults(action=prod)

p = subparsers.add_parser('x', help='execute a command in docker')
p.add_argument('command', help='command to execute')
p.add_argument('--production', action='store_true',
               help='connect to the production database')
p.set_defaults(action=execute)

p = subparsers.add_parser('check', help='run code checks')
p.set_defaults(action=check)

p = subparsers.add_parser('build', help='build the image')
p.set_defaults(action=build)

p = subparsers.add_parser('push', help='push the current built image')
p.set_defaults(action=push)

p = subparsers.add_parser('sql-server',
                          help='start a background local mysql server')
p.set_defaults(action=sql_server)

p = subparsers.add_parser('sql-repl', help='connect to a mysql server')
p.add_argument('--production', action='store_true',
               help='connect to the production database')
p.set_defaults(action=sql_repl)

p = subparsers.add_parser('sql-dump', help='dump the database')
p.add_argument('--production', action='store_true',
               help='connect to the production database')
p.set_defaults(action=sql_dump)


args = vars(parser.parse_args())
action = args.pop('action')
action(**args)
